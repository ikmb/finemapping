manifest.mainScript = 'main.nf'
//process.container = '/home/sukmb465/Documents/Eike/Nextflow/finepipe/finepipe.sif'
process.container = 'library://eikematthias/public/finepipe.sif:latest '



singularity {
  enabled = true
  autoMounts = true
}

params {
  help = false
  boundaries = false
  sumstats = false
  reference = false
  snps = false
  nsum = false
  method = false
  nsignal = false
  ld = "r2"
  output = "results"
  locuszoomdb ="/work_beegfs/sukmb465/Pipelines/finemapping/databases/locuszoom_hg38.db"
  dprime = false
}



profiles {
	standard {
		includeConfig 'configs/medcluster.config'
		}
	local {
		includeConfig 'configs/local.config'
		}
}

env.TMPDIR = "."

// Pipeline Info

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


manifest {
	homePage = ''
	description = 'This pipeline runs Finemap v1.4.'
	mainScript = 'main.nf'
	version = '0.2'
	nextflowVersion = '22.10.7'//'20.10.0'
}


params {
  // Maximum parameters:
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}
/***********************
	Pipeline Info
 **********************/

// Capture exit codes from upstream processes when piping
//process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
	enabled = true
	file = "${params.output}/pipeline_info/timeline.html"
	overwrite = true
}
report {
	enabled = true
	file = "${params.output}/pipeline_info/report.html"
	overwrite = true
}
trace {
	enabled = true
	file = "${params.output}/pipeline_info/trace.txt"
	overwrite = true
	raw = false
	fields = 'task_id,hash,native_id,name,status,exit,submit,duration,realtime,%cpu,peak_rss,peak_vmem,rchar,wchar,queue,attempt,container,cpus,memory,time,tag'
}
dag {
	enabled = true
	file = "${params.output}/pipeline_info/dag.svg"
	overwrite = true
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

